---
job: LIBVMA

step_allow_single_selector: false

registry_host: harbor.mellanox.com
registry_auth: swx-storage

kubernetes:
  privileged: true
  cloud: swx-k8s-spray
  nodeSelector: 'beta.kubernetes.io/os=linux'

  limits: '{memory: 8Gi, cpu: 8000m}'
  requests: '{memory: 8Gi, cpu: 8000m}'

volumes:
  - {mountPath: /hpc/local/bin, hostPath: /hpc/local/bin}
  - {mountPath: /hpc/local/oss, hostPath: /hpc/local/oss}
  - {mountPath: /hpc/local/oss/vma, hostPath: /hpc/local/oss/vma}
  - {mountPath: /auto/sw_tools/Commercial, hostPath: /auto/sw_tools/Commercial}
  - {mountPath: /hpc/local/commercial, hostPath: /hpc/local/commercial}
  - {mountPath: /hpc/local/etc/modulefiles, hostPath: /hpc/local/etc/modulefiles}

credentials:
  - {credentialsId: 'media_coverity_credentials', usernameVariable: 'VMA_COV_USER', passwordVariable: 'VMA_COV_PASSWORD'}
  - {credentialsId: 'mellanox_github_credentials', usernameVariable: 'MELLANOX_GH_USER', passwordVariable: 'MELLANOX_GH_TOKEN'}

env:
  build_dockers: false

runs_on_dockers:
# doca-host
  - {name: 'rhel8.6-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/rhel8.6/base', category: 'base', arch: 'x86_64'}
  - {name: 'rhel9.0-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/rhel9.0/base', category: 'base', arch: 'x86_64'}
  - {name: 'ub24.04-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/ubuntu24.04/base', category: 'base', arch: 'x86_64'}
  - {name: 'ub24.04-aarch64', url: 'harbor.mellanox.com/hpcx/aarch64/ubuntu24.04/base', category: 'base', arch: 'aarch64'}
  - {name: 'sl15sp4-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/sles15sp4/base', category: 'base', arch: 'x86_64'}
  - {name: 'rhel8.6-inbox-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/rhel8.6/builder:inbox', category: 'base', arch: 'x86_64'}
  - {name: 'ub22.04-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/ubuntu22.04/base', category: 'base', arch: 'x86_64'}
  - {name: 'ub22.04-aarch64', url: 'harbor.mellanox.com/hpcx/aarch64/ubuntu22.04/base', category: 'base', arch: 'aarch64'}
# tool
  - {name: 'toolbox', url: 'harbor.mellanox.com/hpcx/x86_64/rhel8.6/builder:inbox', category: 'tool', arch: 'x86_64'}
  - {name: 'blackduck', url: 'harbor.mellanox.com/toolbox/ngci-centos:7.9.2009.2', category: 'tool', arch: 'x86_64'}
  - {name: 'header-check', url: 'harbor.mellanox.com/toolbox/header_check:0.0.51', category: 'tool', arch: 'x86_64', tag: '0.0.51'}

runs_on_agents:
  - {nodeLabel: 'beni09', category: 'base'}

matrix:
  axes:
    flags:
      - default
      - extra
    arch:
      - x86_64
      - aarch64
      - ppc64le

env:
  jenkins_opt_artifacts: 'none'

steps:
  - name: Setup
    run: |
      set +x
      echo
      echo "======================================================"
      echo "name: ${name}"
      echo "arch: ${arch}"
      echo "url: ${uri}"
      echo "tag: ${tag}"
      echo "flags: ${flags}"
      echo "variant: ${variant}"
      echo "======================================================"
      echo
    parallel: false

  - name: Copyrights
    enable: ${do_copyrights}
    credentialsId: 'mellanox_github_credentials'
    run: env WORKSPACE=$PWD GITHUB_TOKEN=$MELLANOX_GH_TOKEN ./contrib/jenkins_tests/copyrights.sh
    containerSelector:
      - "{name: 'header-check', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: '*.log,*.tar.gz'
    parallel: false

  - name: Install Doca-host
    containerSelector:
      - "{category: 'base'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      echo "Installing DOCA: ${DOCA_VERSION} ..."
      .ci/scripts/doca_install.sh 

  - name: Install Doca-host on Tools
    run: |
      echo "Installing DOCA: ${DOCA_VERSION} ..."
      .ci/scripts/doca_install.sh 
    containerSelector:
      - "{name: 'style', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"

  - name: Autogen
    run: |
      ./autogen.sh -s
    parallel: false

  - name: Build
    enable: ${do_build}
    run: |
      [ "x${do_build}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_build=${action} ./contrib/test_jenkins.sh 
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Service
    enable: ${do_service}
    containerSelector:
      - "{category: 'base', variant:1}"
    agentSelector:
      - "{category: 'base', variant:1}"
    run: |
      [ "x${do_service}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_tool=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Package
    enable: ${do_package}
    run: |
      [ "x${do_package}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_rpm=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Style
    enable: ${do_style}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    run: |
      [ "x${do_style}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_style=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Compiler
    enable: ${do_compiler}
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_compiler}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_compiler=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Coverity
    enable: ${do_coverity}
    credentialsId: 'media_coverity_credentials'
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_coverity}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_cov=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz,
      jenkins/**/output/errors/**/*.html

  - name: Cppcheck
    enable: ${do_cppcheck}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09', variant:1}"
    run: |
      [ "x${do_cppcheck}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_cppcheck=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Csbuild
    enable: ${do_csbuild}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09', variant:1}"
    run: |
      [ "x${do_csbuild}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_csbuild=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Test
    enable: ${do_test}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09', variant:1}"
    run: |
      [ "x${do_test}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_run=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Gtest
    enable: ${do_gtest}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09', variant:1}"
    run: |
      [ "x${do_gtest}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_gtest=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveJunit-onfail: |
      jenkins/**/*.xml

  - name: Valgrind
    enable: ${do_valgrind}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09', variant:1}"
    run: |
      [ "x${do_valgrind}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_vg=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz,
      jenkins/**/vg/*valgrind*.log

  - name: Commit
    enable: ${do_commit}
    containerSelector:
      - "{name: 'coverity', category:'tool', variant:1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_commit}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_commit=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Artifacts
    enable: ${do_artifact}
    run: |
      ./.ci/artifacts.sh
    parallel: false
    archiveArtifacts: |
      jenkins/**/arch-*.tar.gz
    archiveJunit: |
      jenkins/**/*.xml

  - name: Blackduck
    enable: ${do_blackduck}
    containerSelector:
      - "{name: 'blackduck', category:'tool', variant:1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    shell: action
    module: ngci
    run: NGCIBlackDuckScan
    args:
      projectName: "LibVMA"
      projectVersion: "0.1.0"
      projectSrcPath: "src"
      attachArtifact: true
      reportName: "BlackDuck report"
      scanMode: "source"
      skipDockerDaemonCheck: true
      credentialsId: "b68aedbd-e39f-4ee2-acce-e25a5b91fe18"
    env:
      SPRING_APPLICATION_JSON: '{"blackduck.url":"https://blackduck.mellanox.com/","blackduck.api.token":"ODMwOWYwMzEtODA2ZC00MzBjLWI1ZDEtNmFiMjBkYzQzMzkwOjNmNjExN2M1LWE2ZmEtNDZlYS1hZjRiLTZlNDgwNjAwOTVjNw=="}'

pipeline_start:
  run: |
    printenv
    echo "Start"

pipeline_stop:
  run: |
    echo "Finish"

failFast: false

taskName: '${flags}/${name}/${axis_index}'

timeout_minutes: 120
